name: Test and Build

on:
  pull_request:
  push:
    branches: [ main ]
    tags:
      - "*"

jobs:
  lint_format:
    runs-on: ubuntu-24.04
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      
      - run: uv sync --dev

      - name: Run Ruff
        run: |
          uv run ruff check  .
          uv run ruff format . --check

      - name: Minimize uv cache
        run: uv cache prune --ci

  typecheck:
    runs-on: ubuntu-24.04
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      
      - run: uv sync --dev

      - name: typecheck
        run: uv run mypy .

      - name: Minimize uv cache
        run: uv cache prune --ci

  test:
    runs-on: ubuntu-24.04
    env:
      UV_CACHE_DIR: /tmp/.uv-cache
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      
      - run: uv sync --dev

      - name: test
        run: |
          uv run manage.py migrate
          uv run manage.py test

      - name: Minimize uv cache
        run: uv cache prune --ci

  build_and_push:
    name: build_and_push
    runs-on: ubuntu-24.04
    needs:
      - lint_format
      - typecheck
      - test

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/sv03
          tags: |
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=short
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=raw,value=${{ steps.extract_branch.outputs.branch }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64 #,linux/arm64
          build-args: |
            GIT_SHA=${{ github.sha }}
            GIT_BRANCH=${{ steps.extract_branch.outputs.branch }}
